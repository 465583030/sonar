#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

class Image(object):
    def __init__(self, name, tag, dockerfile):
        self.name = name
        self.tag = tag
        self.dockerfile = dockerfile

    def full_name(self):
        return "%s:%s" % (self.name, self.tag)

    def Build(self):
        return subprocess.call([
            'docker',
            'build',
            '-f', self.dockerfile,
            '-t', self.full_name(),
            os.path.dirname(self.dockerfile)
        ]) == 0

    def Push(self):
        return subprocess.call([
            'docker',
            'push',
            self.full_name(),
        ]) == 0

    def Tag(self, tag):
        img = Image(self.name, tag, self.dockerfile)
        if subprocess.call([
            'docker',
            'tag',
            self.full_name(),
            img.full_name()]) != 0:
            return None
        return img

def Build(root, here):
    dest = os.path.join(here, 'bin')
    if not os.path.exists(dest):
        os.makedirs(dest)
    return subprocess.call([
        'docker',
        'run',
        '-ti',
        '--rm',
        '-v', '%s:/src' % root,
        '-v', '%s:/src/bin' % dest,
        '-w', '/src',
        'kellegous/build',
        'rake',
    ]) == 0

def GetHead(root):
    p = subprocess.Popen([
        'git',
        'rev-parse',
        'HEAD'],
        stdout = subprocess.PIPE)
    out, _ = p.communicate()
    return out.decode('utf-8').strip()

def main():
    here = os.path.abspath(os.path.dirname(__file__))
    root = os.path.abspath(os.path.join(here, '..'))

    parser = argparse.ArgumentParser()
    parser.add_argument('version',
        nargs='?',
        help='')
    parser.add_argument('--latest',
        default=False,
        action='store_true',
        help='')
    parser.add_argument('--push',
        default=False,
        action='store_true',
        help='')
    args = parser.parse_args()

    if args.version is None:
        args.version = GetHead(root)[:12]

    # TODO(knorton): make sure we have kellegous/build

    if not Build(root, here):
        return 1

    images = [
        Image(
            'kellegous/sonar',
            args.version,
            os.path.join(here, 'Dockerfile')),
    ]

    for image in images:
        if not image.Build():
            return 1

        if args.push:
            if not image.Push():
                return 1

        if not args.latest:
            continue

        tagged = image.Tag('latest')
        if tagged is None:
            return 1

        if args.push:
            if not tagged.Push():
                return 1

    return 0

if __name__ == '__main__':
    sys.exit(main())
